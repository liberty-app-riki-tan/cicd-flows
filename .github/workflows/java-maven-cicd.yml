on:
  workflow_call:
    inputs:
      service-config-name:
        required: true
        type: string
      jar-path:
        required: false
        type: string
      dockerfile-path:
        required: false
        type: string
      java-version:
        required: false
        type: number
      containerName:
        required: false
        type: string
      containerPort:
        required: false
        type: string
      ecs-service:
        required: false
        type: string
      deploy-env:
        required: false
        type: string
      deploy_tag:
        required: false
        type: string
      repo-name:
        required: false
        type: string
      branch:
        required: false
        type: string
      update-desired-count:
        required: false
        type: number
        default: -1
      maven-param:
        required: false
        type: string
      cp-jar-cmd:
        required: false
        type: string
      pom-file-path:
        required: false
        type: string
      config-xml-path:
        required: false
        type: string

jobs:
  ci_build:
    runs-on: [ self-hosted, mvn ]
    environment:
      name: ${{ inputs.deploy-env }}
    env:
      service-tag: ${{ inputs.deploy_tag }}
      deploy_env: ${{ inputs.deploy-env }}
    name: CI&CD flow
    outputs:
      image-name: ${{ steps.output.outputs.image-name }}
    steps:
      - name: Checkout local repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set env for local repo
        run: |
          echo "env-commit-sha=${{ github.sha }}" >>${GITHUB_ENV}
        shell: bash
      - name: Transfer env to lowercase
        run: |
          echo "deploy_env_lowercase=${deploy_env,,}" >>${GITHUB_ENV}
      - name: Init Config
        uses: liberty-group-tech/cicd-actions/.github/actions/get-config@master
        with:
          service-config-name: ${{ inputs.service-config-name }}
          token: ${{ secrets.REPO_T }}
          config-file: env-config-service.yml
          deploy-env: ${{ env.deploy_env_lowercase }}
      - name: Do health check
        uses: liberty-group-tech/cicd-actions/.github/actions/health-check@master
        with:
          env_not_ready: ${{ env.env_not_ready }}
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: ${{ inputs.java-version }}
          distribution: 'temurin'
      - name: Build with Maven
        run: |
          export M2_HOME=/home/ssm-user/apache-maven-3.8.8
          PATH=$M2_HOME/bin:$PATH
          echo "mvn dependency:purge-local-repository -DactTransitively=false"
          mvn -e clean package -Dmaven.test.skip=true -U ${{ inputs.maven-param }} ${{ inputs.config-xml-path }} ${{ inputs.pom-file-path }}
      - name: Copy dockerfile
        if: ${{ inputs.dockerfile-path != '' }}
        run: |
          cp ${{ inputs.dockerfile-path }} Dockerfile
      - name: Copy jar
        if: ${{ inputs.cp-jar-cmd != '' }}
        run: |
          ${{ inputs.cp-jar-cmd }}
      - name: Docker build and push
        id: docker-build
        uses: liberty-group-tech/cicd-actions/.github/actions/ecr-build-push@master
        with:
          aws-region: ${{ env.aws-region }}
          aws-tools-region: ${{ env.aws-tools-region }}
          aws-role: ${{ env.aws-role }}
          project-name: ${{ inputs.containerName }}
          aws-registry: ${{ env.aws-registry }}
          need-del-local-image: true
          env-commit-sha: ${{ env.env-commit-sha }}
      - id: tg-create
        uses: liberty-group-tech/cicd-actions/.github/actions/amazon-ecs-targetgroup-create-definition@master
        if: ${{ inputs.deploy_tag != 'normal' }}
        with:
          originalTgArn: ${{ env.targetGroupArn }}
          newTgName: liberty-${{ env.deploy_env_lowercase }}-${{ inputs.ecs-service }}
          listenerArn:  ${{ env.listenerArn }}
          headerName: x-gray-env
          tag: ${{ inputs.deploy_tag }}
      - run: echo ${{ steps.tg-create.outputs.new-tg-arn }}
        if: ${{ inputs.deploy_tag != 'normal' }}
        shell: bash
      - name: Update service count if need
        uses: liberty-group-tech/cicd-actions/.github/actions/amazon-ecs-service-update-count@master
        if: ${{ inputs.update-desired-count != -1 }}
        timeout-minutes: 10
        with:
          service: liberty-${{ env.deploy_env_lowercase }}-${{ inputs.ecs-service }}
          cluster: ${{ env.cluster }}
          wait-for-service-stability: true
          wait-for-minutes: 5
          desiredCount: ${{ inputs.update-desired-count }}
      - name: Deploy Amazon ECS task definition with tag
        uses: liberty-group-tech/cicd-actions/.github/actions/ecs-deploy@master
        if: ${{ inputs.deploy_tag != 'normal' }}
        timeout-minutes: 10
        with:
          aws-region: ${{ env.aws-region }}
          aws-role: ${{ env.aws-role }}
          ecs-service: liberty-${{ env.deploy_env_lowercase }}-${{ inputs.ecs-service }}
          ecs-cluster: ${{ env.cluster }}
          image-full-name: ${{ steps.docker-build.outputs.image-name }}
          container-name: liberty-${{ env.deploy_env_lowercase }}-${{ inputs.ecs-service }}
          containerPort: ${{ inputs.containerPort }}
          targetGroupArn: ${{ steps.tg-create.outputs.new-tg-arn }}
          securityGroups: ${{ env.securityGroups }}
          subnets: ${{ env.subnets }}
          task-definition-file: ${{ env.task-definition-file-tag }}
          healthCheckGracePeriodSeconds: ${{ env.hcgs }}
          tags: ${{ env.tags }}
          wait-for-minutes: 5
          replace-variables: |
            {{TAG}}=${{ env.service-tag }}
          wait: true
      - name: Deploy Amazon ECS task definition
        uses: liberty-group-tech/cicd-actions/.github/actions/ecs-deploy@master
        if: ${{ inputs.deploy_tag == 'normal' }}
        timeout-minutes: 10
        with:
          aws-region: ${{ env.aws-region }}
          aws-role: ${{ env.aws-role }}
          ecs-service: liberty-${{ env.deploy_env_lowercase }}-${{ inputs.ecs-service }}
          ecs-cluster: ${{ env.cluster }}
          image-full-name: ${{ steps.docker-build.outputs.image-name }}
          container-name: liberty-${{ env.deploy_env_lowercase }}-${{ inputs.ecs-service }}
          containerPort: ${{ inputs.containerPort }}
          targetGroupArn: ${{ env.targetGroupArn }}
          securityGroups: ${{ env.securityGroups }}
          subnets: ${{ env.subnets }}
          task-definition-file: ${{ env.task-definition-file }}
          healthCheckGracePeriodSeconds: ${{ env.hcgs }}
          tags: ${{ env.tags }}
          wait-for-minutes: 5
          replace-variables: |
            {{TAG}}=${{ env.service-tag }}
          wait: true
