on:
  workflow_call:
    inputs:
      service-config-name:
        required: true
        type: string
      containerName:
        required: false
        type: string
      containerPort:
        required: false
        type: string
      ecs-service:
        required: false
        type: string
      docker_arg_list:
        required: false
        type: string  
      deploy-env:
        required: false
        type: string
  
jobs:
  ci_build:
    runs-on: self-hosted
    environment:
      name: ${{ inputs.deploy-env }}
    env:
      aws-region: ${{ vars.AWS_REGION }}
      aws-role: ${{ vars.AWS_ROLE }}
      cluster: ${{ vars.ECS_CLUSTER }}
      targetGroupArn: ${{ vars.TARGETGROUPARN }}
      securityGroups: ${{ vars.SECURITYGROUPS }}
      subnets: ${{ vars.SUBNETS }}
      task-definition-file: ${{ vars.TASK_DEF_FILE }}
      aws-registry: ${{ vars.DOCKER_REGISTRY }}
    name: CICD flow of Web
    steps:
      - uses: actions/checkout@v3
      - name: Init Config
        uses: liberty-group-tech/cicd-actions/.github/actions/get-config@master
        with:
          service-config-name: ${{ inputs.service-config-name }}
      - run: |
          echo "deploy_env_lowercase=${deploy-env,,}" >>${GITHUB_ENV}
      - name: Docker build and push
        id: docker-build
        uses: liberty-group-tech/cicd-actions/.github/actions/ecr-build-push@master
        with:
          aws-region: ${{ env.aws-region }}
          aws-role: ${{ env.aws-role }}
          project-name: ${{ inputs.containerName }}
          aws-registry: ${{ env.aws-registry }}
          docker-build-arg: "--build-arg APP_ENV=${{ env.deploy_env_lowercase }} ${{ inputs.docker_arg_list }}"
          need-del-local-image: true
      - run: echo ${{ steps.docker-build.outputs.image-name }}
        shell: bash
      - name: Deploy Amazon ECS task definition
        uses: liberty-group-tech/cicd-actions/.github/actions/ecs-deploy@v1.1
        timeout-minutes: 5
        with:
          aws-region: ${{ env.aws-region }}
          aws-role: ${{ env.aws-role }}
          ecs-service: ${{ inputs.ecs-service }}
          ecs-cluster: ${{ env.cluster }}
          image-full-name: ${{ steps.docker-build.outputs.image-name }}
          container-name: ${{ inputs.containerName }}
          containerPort: ${{ inputs.containerPort }}
          targetGroupArn: ${{ env.targetGroupArn }}
          securityGroups: ${{ env.securityGroups }}
          subnets: ${{ env.subnets }}
          task-definition-file: ${{ env.task-definition-file }}
          healthCheckGracePeriodSeconds: 0
          environment-variables: |
            process.env.COMMIT_ID=${{ github.sha }}
            process.env.ENV=${{ inputs.deploy-env }}
          wait: true
