on:
  workflow_call:
    inputs:
      service-config-name:
        required: true
        type: string
      jar-path:
        required: true
        type: string
      java-version:
        required: false
        type: number
      containerName:
        required: false
        type: string
      containerPort:
        required: false
        type: string
      ecs-service:
        required: false
        type: string
      deploy-env:
        required: false
        type: string
      deploy_tag:
        required: false
        type: string
jobs:
  ci_build:
    runs-on: [ self-hosted, dev-qa-ci ]
    environment:
      name: ${{ inputs.deploy-env }}
    env:
      aws-region: ${{ vars.AWS_REGION }}
      aws-role: ${{ vars.AWS_ROLE }}
      cluster: ${{ vars.ECS_CLUSTER }}
      targetGroupArn: ${{ vars.TARGETGROUPARN }}
      securityGroups: ${{ vars.SECURITYGROUPS }}
      subnets: ${{ vars.SUBNETS }}
      task-definition-file: ${{ vars.TASK_DEF_FILE }}
      task-definition-file-tag: ${{ vars.TASK_DEF_FILE_TAG }}
      aws-registry: ${{ vars.DOCKER_REGISTRY }}
      hcgs: ${{ vars.HEALTHCHECKGRACEPERIODSECONDS }}
      service-tag: ${{ inputs.deploy_tag }}
      listenerArn: ${{ vars.LISTENERARN }}
      env_not_ready: ${{ vars.NOT_READY }}
    name: CI flow
    outputs:
      image-name: ${{ steps.output.outputs.image-name }}
    steps:
      - name: Do health check
        uses: liberty-group-tech/cicd-actions/.github/actions/health-check@master
        with:
          env_not_ready: ${{ env.env_not_ready }}
      - name: Code CI build
        uses: liberty-group-tech/cicd-actions/.github/actions/ci-java-gradle-action@v1
        with:
          java-version: ${{ inputs.java-version }}
          jar-path: ${{ inputs.jar-path }}
      - name: Init Config
        uses: liberty-group-tech/cicd-actions/.github/actions/get-config@master
        with:
          service-config-name: ${{ inputs.service-config-name }}
      - name: Docker build and push
        id: docker-build
        uses: liberty-group-tech/cicd-actions/.github/actions/ecr-build-push@master
        with:
          aws-region: ${{ env.aws-region }}
          aws-role: ${{ env.aws-role }}
          project-name: ${{ inputs.containerName }}
          aws-registry: ${{ env.aws-registry }}
          need-del-local-image: true
      - name: Set out put
        id: output
        run: |
          echo "image-name=${{ steps.docker-build.outputs.image-name }}" >> $GITHUB_OUTPUT
  deploy:
    runs-on: [ self-hosted, dev-qa-cd ]
    needs: ci_build
    environment:
      name: ${{ inputs.deploy-env }}
    env:
      aws-region: ${{ vars.AWS_REGION }}
      aws-role: ${{ vars.AWS_ROLE }}
      cluster: ${{ vars.ECS_CLUSTER }}
      targetGroupArn: ${{ vars.TARGETGROUPARN }}
      securityGroups: ${{ vars.SECURITYGROUPS }}
      subnets: ${{ vars.SUBNETS }}
      task-definition-file: ${{ vars.TASK_DEF_FILE }}
      task-definition-file-tag: ${{ vars.TASK_DEF_FILE_TAG }}
      aws-registry: ${{ vars.DOCKER_REGISTRY }}
      hcgs: ${{ vars.HEALTHCHECKGRACEPERIODSECONDS }}
      service-tag: ${{ inputs.deploy_tag }}
      listenerArn: ${{ vars.LISTENERARN }}
      tags: ${{ vars.TAGS }}
      deploy_env: ${{ inputs.deploy-env }}
    name: CD flow
    steps:
      - name: Transfer env to lowercase
        run: |
          echo "deploy_env_lowercase=${deploy_env,,}" >>${GITHUB_ENV}
      - name: Init Config
        uses: liberty-group-tech/cicd-actions/.github/actions/get-config@master
        with:
          service-config-name: ${{ inputs.service-config-name }}
      - name: Assume new role
        uses: liberty-group-tech/cicd-actions/.github/actions/change-aws-role@master
        with:
          aws-region: ${{ env.aws-region }}
          aws-role: ${{ env.aws-role }}
      - name: Create target group if need
        id: tg-create
        uses: liberty-group-tech/cicd-actions/.github/actions/amazon-ecs-targetgroup-create-definition@master
        if: ${{ inputs.deploy_tag != 'normal' }}
        with:
          originalTgArn: ${{ env.targetGroupArn }}
          newTgName: liberty-${{ env.deploy_env_lowercase }}-${{ inputs.ecs-service }}
          listenerArn:  ${{ env.listenerArn }}
          headerName: x-gray-env
          tag: ${{ inputs.deploy_tag }}
      - run: echo ${{ steps.tg-create.outputs.new-tg-arn }}
        if: ${{ inputs.deploy_tag != 'normal' }}
        shell: bash
      - name: Deploy Amazon ECS task definition
        uses: liberty-group-tech/cicd-actions/.github/actions/ecs-deploy@master
        if: ${{ inputs.deploy_tag != 'normal' }}
        timeout-minutes: 5
        with:
          aws-region: ${{ env.aws-region }}
          aws-role: ${{ env.aws-role }}
          ecs-service: liberty-${{ env.deploy_env_lowercase }}-${{ inputs.ecs-service }}
          ecs-cluster: ${{ env.cluster }}
          image-full-name: ${{ steps.docker-build.outputs.image-name }}
          container-name: liberty-${{ env.deploy_env_lowercase }}-${{ inputs.ecs-service }}
          containerPort: ${{ inputs.containerPort }}
          targetGroupArn: ${{ steps.tg-create.outputs.new-tg-arn }}
          securityGroups: ${{ env.securityGroups }}
          subnets: ${{ env.subnets }}
          task-definition-file: ${{ env.task-definition-file-tag }}
          healthCheckGracePeriodSeconds: ${{ env.hcgs }}
          tags: ${{ env.tags }}
          replace-variables: |
            {{TAG}}=${{ env.service-tag }}
      - name: Deploy Amazon ECS task definition
        uses: liberty-group-tech/cicd-actions/.github/actions/ecs-deploy@master
        if: ${{ inputs.deploy_tag == 'normal' }}
        timeout-minutes: 5
        with:
          aws-region: ${{ env.aws-region }}
          aws-role: ${{ env.aws-role }}
          ecs-service: liberty-${{ env.deploy_env_lowercase }}-${{ inputs.ecs-service }}
          ecs-cluster: ${{ env.cluster }}
          image-full-name: ${{ needs.ci_build.outputs.image-name }}
          container-name: liberty-${{ env.deploy_env_lowercase }}-${{ inputs.ecs-service }}
          containerPort: ${{ inputs.containerPort }}
          targetGroupArn: ${{ env.targetGroupArn }}
          securityGroups: ${{ env.securityGroups }}
          subnets: ${{ env.subnets }}
          task-definition-file: ${{ env.task-definition-file }}
          healthCheckGracePeriodSeconds: ${{ env.hcgs }}
          tags: ${{ env.tags }}
          replace-variables: |
            {{TAG}}=${{ env.service-tag }}
          wait: true
