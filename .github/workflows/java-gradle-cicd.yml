on:
  workflow_call:
    inputs:
      jar-path:
        required: true
        type: string
      java-version:
        required: false
        type: number
      aws-region:
        required: false
        type: string
      containerName:
        required: false
        type: number
      containerPort:
        required: false
        type: number
      targetGroupArn:
        required: false
        type: number
      securityGroups:
        required: true
        type: string
      subnets:
        required: true
        type: string
      ecs-service:
        required: true
        type: string
      ecs-cluster:
        required: true
        type: string
      deploy-env:
        required: true
        type: string
jobs:
  ci:
    runs-on: self-hosted
    environment:
      name: ${{ inputs.deploy-env }}
    name: CICD flow of java gradle build
    steps:
      - name: Code CI build
        uses: PROTOTYPE/cicd-actions/.github/actions/ci-java-gradle-action@v1
        with:
          java-version: ${{ inputs.java-version }}
          jar-path: ${{ inputs.jar-path }}
      - name: Docker build and push
        id: docker-build
        uses: PROTOTYPE/cicd-actions/.github/actions/ecr-build-push@v1
        with:
          aws-region: ${{ secrets.AWS_REGION }}
          project-name: ${{ inputs.containerName }}
      - run: echo ${{ steps.docker-build.outputs.image-name }}
        shell: bash
      - name: Deploy Amazon ECS task definition
        uses: PROTOTYPE/cicd-actions/.github/actions/ecs-deploy@v1
        with:
          service: ${{ inputs.ecs-service }}
          cluster: ${{ secrets.ECS_CLUSTER }}
          image-full-name: ${{ steps.docker-build.outputs.image-name }}
          containerName: ${{ inputs.containerName }}
          containerPort: ${{ inputs.containerPort }}
          targetGroupArn: ${{ secrets.TARGETGROUPARN }}
          securityGroups: ${{ secrets.SECURITYGROUPS }}
          subnets: ${{ secrets.SUBNETS }}
          wait: true
